def current_milli_time():
    return round(time.time() * 1000)

laggingNotifCooldown = 0
timeFactor = 1
while running:
    startTime = current_milli_time()
    #screen. fill((0, 0, 0))
    Pos = pygame.mouse.get_pos()




  pygame.display.update()
#calculate how long to sleep
    currentTime = current_milli_time()
    deltaTime = currentTime - startTime
    remainingFrameTime = 25 - deltaTime
    if (remainingFrameTime < 0):
        if laggingNotifCooldown == 0:
            laggingNotifCooldown = 50 #Dont scream every tick, it only makes it worse
            print("Game is lagging! (remaining frame time = " + str(remainingFrameTime) + ", total time = " + str(deltaTime) + ")")
        else:
            laggingNotifCooldown -= 1
    else:
        time.sleep(remainingFrameTime / 1000) #Convert to seconds


#RShelf = pygame.image.load("RotatedShelf.png")


#Def Img
# start_img = image('start.png')
# settings_img = image('settings.png')
# HighScore_img = image('HighScore.png')
# Controls = image("controls screen.png")
# ControllerB = image("ControllerButton.png")
# SoundOn = image ("AudioOn.png")
# SoundOff = image("AudioOff.png")
# Back = image("return.png")

# create button instances
# start_button = Button(212, 425, start_img, 0.8)
# settings_button = Button(401, 425, settings_img, 0.8)
# HighScore_button = Button(612, 425, HighScore_img, 0.8)
# Controller_button = Button(200,310, ControllerB, 1)

# def Settings():
#     screen.fill((255, 255, 255))
#     screen.blit(ControllerB, (210, 350))
#     screen.blit(SoundOn, (440, 365))

#def HScore():

# This is my while loop for the menu screen

# i am going to replace this with the love hearts health icon
# class HealthBar():
#     def __init__(self, x, y, w, h, max_hp): # this is x, y coordinates, the width and the height of the rectangle and the max health points
#         self.x = x
#         self.y = y
#         self.w = w
#         self.h = h
#         self.hp = max_hp # starts at full health
#         self.max_hp = max_hp

#     def draw(self,surface):
#         #calculate health ratio
#         ratio = self.hp / self.max_hp
#         #2 rectangles ontop of each other to create the health bar
#         pygame.draw.rect(surface, "red", (self.x, self.y, self.w, self.h))
#         pygame.draw.rect(surface, "green", (self.x, self.y, self.w * ratio, self.h))

# health_bar = HealthBar (700,150,200,40,100)

# def loadLevel():
#     global currentLevelItems
#     currentLevelItems = currentLevel.createItemSetForGame()